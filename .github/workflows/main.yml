# This is a basic workflow to help you get started with Actions

name: BuildToRelease

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.2
      
    - name: Navigate to Workspace
      run: cd $GITHUB_WORKSPACE

    - name: Create Build Directory
      run: mkdir _build
      
    #- name: Restore Packages
    #  run: nuget restore OWML.sln
    
    #- name: Build Solution
    #  run: |
    #    msbuild.exe OWML.sln /p:platform="Any CPU" /p:configuration="Debug" /p:PackageLocation="../_build"
        
   # - name: pack nuget
   #   run: nuget pack OWML.Nuget/OWML.Nuget.csproj
    - uses: Amadevus/pwsh-script@v1
      id: script
      with:
        script: Compress-Archive -Path './README.md' -DestinationPath './my-artifact.zip'
    #- name: Build project # This would actually build your project, using zip for an example artifact
    #  run: |
    #    zip --junk-paths my-artifact README.md
    - name: Read Properties
      id: read_property
      uses:  ashley-taylor/read-json-property-action@v1.0
      with:
        path: OWML.Launcher/OWML.Manifest.json
        property: version
    
    - name: echo version
      run: echo ${{ steps.read_property.outputs.value }}
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.read_property.outputs.value }}
        release_name: Release ${{ steps.read_property.outputs.value }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: true
        prerelease: true
    
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: test_artifact
        path: "./"
        #path: "./_build"
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./my-artifact.zip
          asset_name: my-artifact.zip
          asset_content_type: application/zip  
